const { levelUp } = require('./commands');
let Users = require('./Users');
let UsersList = JSON.parse(process.env.Puples); 
let AdminsID = [389495959]; 

module.exports = {
    // –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∫–æ–º–º–∞–Ω–¥
    //===============================================================================================
    helpMessage(obj) {
        let txt = '–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–º–∞–Ω–¥:';
        for (const key in obj) {
            if(typeof obj[key] == 'object') {
                txt += `\n\n${obj[key].run} ${obj[key].descr}`; 
            }
        }
        return txt;
    },
    // –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –ø–æ–¥—â–µ—Ç–∞ –≥–ª–∞—Å—Ç–Ω—ã—Ö –±—É–∫–≤
    //===============================================================================================
    Go(msg) {
        let Letters = '–∞–µ—ë–∏–æ—É—ã—ç—é—èaeiouy'.split('');
        let num = 0;
        let NewStr = [];
        
        msg[1].split('').forEach((item) => {
            NewStr.push(item);
            Letters.forEach(e => {
                if (item.toLowerCase() === e) {
                    NewStr.pop();
                    NewStr.push('[', item, ']');
                    num++;
                }
            });
        });
        return `–í –≤–∞—à–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ ${num} –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤(—ã):\t\t${NewStr.join('')}`;
    },
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–µ–π –¥–µ–≤—É—à–∫–∏
    //===============================================================================================
    Love() {
        let stikers = ['‚ù§', 'üíã', 'üòç', 'üòò', 'ü•∞', 'üòú'];
        return stikers[rand(0, stikers.length - 1)];
    },
    // –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —á–∏—Å–µ–ª
    //===============================================================================================
    CommandRand(ctx, msg) {
        let num1 = '';
        let num2 = '';
        
    },
    // –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    //===============================================================================================
    outPutTime() {
        let time = new Date();
        let year = time.getFullYear();
        let monthIndex = time.getMonth();
        let monthArr = ['–Ø–Ω–≤–∞—Ä—å','–§–µ–≤—Ä–∞–ª—å','–ú–∞—Ä—Ç','–ê–ø—Ä–µ–ª—è','–ú–æ–∂–µ—Ç','–ò—é–Ω—å','–ò—é–ª—å','–ê–≤–≥—É—Å—Ç','–°–µ–Ω—Ç—è–±—Ä—å','–û–∫—Ç—è–±—Ä—å','–ù–æ—è–±—Ä—å','–î–µ–∫–∞–±—Ä—å' ];
        let month = monthArr[monthIndex];
        let day = time.getDay();
        let hor = time.getHours();
        let min = time.getMinutes();
        let sec = time.getSeconds();
        
        
        return `=============================================================================\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω:\n–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: ${day}/${month}/${year} ${hor}:${min}:${sec}`;
    },
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ–ª-–∫–∞
    //===============================================================================================
    getStat(UserInfo) {
        let message = "–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–∏–∑–¥—ã–∫–Ω—É–ª—Å—è"; 
        let index = -1;
        let name = UserInfo.from.username;
        let id = UserInfo.from.id ;

        UsersList.forEach((item, i) => {
            if(item.id === id) {
                index = i;
            }
        });

        if (UsersList.length === 0 || index === -1) {
            addUsers({name, id});
            index = UsersList.length - 1;
        }

        message = `–ü—Ä–æ—Ñ–∏–ª—å: ${UsersList[index].name}\n\n–°—Ç–∞—Ç—É—Å: ${UsersList[index].info.status}\n–£—Ä–æ–≤–µ–Ω—å: ${UsersList[index].info.level}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: ${UsersList[index].info.points}`;   
        return message;
    },   
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    //===============================================================================================
    levelUp(msg, newNum = 1) {
        if (msg.reply_to_message) {
            let id = msg.from.id;
            let Update = false;

            AdminsID.forEach((item) => Update = item === id ? true: Update);
    
            if (Update) {
                let idForUdate = msg.reply_to_message.from.id;
                let userName = msg.reply_to_message.from.username; 

               
                let isFound = false;
                UsersList.forEach((item) => {
                    if (item.id === idForUdate) {
                        isFound = true;
                        item.UpdateLevel(newNum);
                    }
                })
                
                if (!isFound) {
                    newNum++;
                    addUsers({name:userName, id:idForUdate, level:newNum});
                };
            
                return `–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—è: ${userName} –æ–±–Ω–æ–≤–ª—ë–Ω`;
            } else {
                return `–£–≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã`;
            }
        }
       
    },   
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Point-–æ–≤
    //===============================================================================================
    pointUp(msg, newNum = 0) {
        if (msg.reply_to_message) {
            let id = msg.from.id;
            let Update = false;
            AdminsID.forEach((item) => Update = item === id ? true: Update);
    
            if (Update) {
                let idForUdate = msg.reply_to_message.from.id;
                let userName = msg.reply_to_message.from.username; 
                let isFound = false;

                UsersList.forEach((item) => {
                    if (item.id === idForUdate) {
                        isFound = true;
                        item.UpdatePoints(newNum);
                    }
                })
                
                if (!isFound) {
                    newNum++;
                    addUsers({name:userName, id:idForUdate, points:newNum});
                };
                return `–ë–∞–ª–ª—ã –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—è: ${userName} –æ–±–Ω–æ–≤–ª–µ–Ω—ã`;
            } else {
                return `–£–≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã`;
            }
        }
       
    },   
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –í—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ json
    //===============================================================================================
    saveInfoUsersList() {
        console.log(JSON.stringify(UsersList));
    },   
}
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
//===================================================================================================
function rand(min = 0, max = 100) {
    return Math.floor((Math.random()*(max + 1 - min)) + min);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –î–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//==============================================================================================
function addUsers({name, id, level = 1, status = "Beginer", points = 0}) { 
    let newUser = new Users({
        name,
        id,
        level,
        status,
        points
    });
    UsersList.push(newUser);
}